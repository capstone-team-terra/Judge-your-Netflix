{"ast":null,"code":"var _jsxFileName = \"/Users/Natalie/Desktop/SeniorPhase/Judge-your-Netflix/web/src/components/resultsComponent/GenresCount.js\";\nimport React from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { Card } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GenresCount(props) {\n  const {\n    result\n  } = props;\n  const resultsArr = Object.entries(result); //sort the data to large to small\n\n  const allSorted = resultsArr.sort((a, b) => b[1] - a[1]);\n  const sorted = allSorted.slice(0, 5); //define yValues & xValues to be used with your chart\n\n  const numArr = sorted.map(data => data[1]);\n  const genresArr = sorted.map(data => data[0]);\n  const state = {\n    labels: genresArr,\n    datasets: [{\n      label: \"Watches\",\n      backgroundColor: [\"rgba(234, 87, 102)\", \"rgb(155, 67, 8)\", \"rgb(223, 54, 12)\", \"#666699\", \"#CC9933\"],\n      data: numArr,\n      hoverOffset: 30\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: sorted.length !== 0 ? /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        background: \"rgb(34, 36, 41)\",\n        boxShadow: \"0px 0px 10px 5px rgba(100, 100, 100, .6)\",\n        maxWidth: \"700px\",\n        height: \"690px\",\n        borderRadius: \"10px\",\n        overflow: \"hidden\",\n        paddingTop: \"1.5em\",\n        paddingRight: \"1.5em\",\n        paddingLeft: \"1.5em\",\n        paddingBottom: \"1em\",\n        margin: \"1em\",\n        color: \"rgb(224, 228, 228)\",\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Card.Title, {\n          style: {\n            textAlign: \"center\",\n            fontSize: 30\n          },\n          children: \"Top 5 most viewed genres\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Pie, {\n          data: state,\n          options: {\n            legend: {\n              display: true\n            }\n          },\n          width: 600,\n          height: 400\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"20px\",\n            fontStyle: \"italic\"\n          },\n          children: [\"You watched\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: \"rgba(234, 87, 102)\"\n            },\n            children: [sorted[0][1], \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), sorted[0][0], \" shows... Such great taste!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No genres data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/Natalie/Desktop/SeniorPhase/Judge-your-Netflix/web/src/components/resultsComponent/GenresCount.js"],"names":["React","Pie","Card","GenresCount","props","result","resultsArr","Object","entries","allSorted","sort","a","b","sorted","slice","numArr","map","data","genresArr","state","labels","datasets","label","backgroundColor","hoverOffset","length","background","boxShadow","maxWidth","height","borderRadius","overflow","paddingTop","paddingRight","paddingLeft","paddingBottom","margin","color","display","justifyContent","textAlign","fontSize","legend","fontStyle"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { Card } from \"react-bootstrap\";\nexport default function GenresCount(props) {\n  const { result } = props;\n  const resultsArr = Object.entries(result);\n\n  //sort the data to large to small\n  const allSorted = resultsArr.sort((a, b) => b[1] - a[1]);\n  const sorted = allSorted.slice(0, 5);\n  //define yValues & xValues to be used with your chart\n  const numArr = sorted.map((data) => data[1]);\n  const genresArr = sorted.map((data) => data[0]);\n\n  const state = {\n    labels: genresArr,\n    datasets: [\n      {\n        label: \"Watches\",\n        backgroundColor: [\n          \"rgba(234, 87, 102)\",\n          \"rgb(155, 67, 8)\",\n          \"rgb(223, 54, 12)\",\n          \"#666699\",\n          \"#CC9933\",\n        ],\n        data: numArr,\n        hoverOffset: 30,\n      },\n    ],\n  };\n  return (\n    <div>\n      {sorted.length !== 0 ? (\n        <Card\n          style={{\n            background: \"rgb(34, 36, 41)\",\n            boxShadow: \"0px 0px 10px 5px rgba(100, 100, 100, .6)\",\n            maxWidth: \"700px\",\n            height: \"690px\",\n            borderRadius: \"10px\",\n            overflow: \"hidden\",\n            paddingTop: \"1.5em\",\n            paddingRight: \"1.5em\",\n            paddingLeft: \"1.5em\",\n            paddingBottom: \"1em\",\n            margin: \"1em\",\n            color: \"rgb(224, 228, 228)\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <div>\n            <Card.Title style={{ textAlign: \"center\", fontSize: 30 }}>\n              Top 5 most viewed genres\n            </Card.Title>\n          </div>\n          <div>\n            <Pie\n              data={state}\n              options={{\n                legend: {\n                  display: true,\n                },\n              }}\n              width={600}\n              height={400}\n            />\n          </div>\n          <div>\n            <p style={{ fontSize: \"20px\", fontStyle: \"italic\" }}>\n              You watched{\" \"}\n              <span style={{ color: \"rgba(234, 87, 102)\" }}>\n                {sorted[0][1]}{\" \"}\n              </span>\n              {sorted[0][0]} shows... Such great taste!\n            </p>\n          </div>\n        </Card>\n      ) : (\n        <div>No genres data</div>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
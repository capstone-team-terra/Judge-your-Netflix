{"ast":null,"code":"var _jsxFileName = \"/Users/Natalie/Desktop/SeniorPhase/Judge-your-Netflix/web/src/components/resultsComponent/ShowsCount.js\";\nimport React from \"react\";\nimport { HorizontalBar } from \"react-chartjs-2\";\nimport { Card, Button, Container, Row, Col } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ShowsCount(props) {\n  const {\n    result\n  } = props; //convert data object to arrays\n\n  const resultsArr = Object.entries(result); //sort the data to small to large\n\n  const sorted = resultsArr.sort((a, b) => b[1] - a[1]); //filter only the top 20 most viewed shows/movies\n\n  const limitToTopTwenty = sorted.slice(-20);\n  const top1Name = limitToTopTwenty[0][0];\n  const top1Count = limitToTopTwenty[0][1];\n  const top2Name = limitToTopTwenty[1][0];\n  const top2Count = limitToTopTwenty[1][1];\n  const top3Name = limitToTopTwenty[2][0];\n  const top3Count = limitToTopTwenty[2][1]; //define yValues & xValues to be used with your chart\n\n  const yValues = limitToTopTwenty.map(data => data[1]);\n  const xValues = limitToTopTwenty.map(data => data[0]); //main data set for Graph\n\n  const resultData = {\n    labels: xValues,\n    datasets: [{\n      data: yValues,\n      backgroundColor: \"rgba(234, 87, 102, 0.6)\",\n      borderColor: \"rgba(234, 87, 102, 0.6)\"\n    }]\n  }; //option for Graph\n\n  const options = {\n    maintainAspectRatio: false,\n    title: {\n      display: true,\n      text: \"Your Top Viewed Shows\",\n      fontSize: 25\n    },\n    legend: {\n      display: false\n    },\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: \"total view count (per watch event)\",\n          fontColor: \"rgb(224, 228, 228)\"\n        },\n        ticks: {\n          fontColor: \"rgb(224, 228, 228)\"\n        }\n      }],\n      xAxes: [{\n        scaleLabel: {\n          fontColor: \"rgb(224, 228, 228)\"\n        },\n        ticks: {\n          fontColor: \"rgb(224, 228, 228)\"\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      backgroundColor: \"rgb(34, 36, 41)\",\n      boxShadow: \"0 0 6px rgba(0, 0, 0, 0.1)\",\n      // position: \"absolute\",\n      // top: \"50%\",\n      // left: \"50%\",\n      // transform: \"translate(-50%, -50%)\",\n      maxWidth: \"500px\",\n      height: \"500px\",\n      borderRadius: \"10px\",\n      overflow: \"hidden\",\n      paddingTop: \"1em\",\n      paddingBotton: \"2em\",\n      color: \"rgb(224, 228, 228)\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"about\",\n      style: {\n        height: \"150px\",\n        padding: \"20px\",\n        boxSizing: \"border-box\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(HorizontalBar, {\n          data: resultData,\n          options: options,\n          width: 500,\n          height: 250\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/Natalie/Desktop/SeniorPhase/Judge-your-Netflix/web/src/components/resultsComponent/ShowsCount.js"],"names":["React","HorizontalBar","Card","Button","Container","Row","Col","ShowsCount","props","result","resultsArr","Object","entries","sorted","sort","a","b","limitToTopTwenty","slice","top1Name","top1Count","top2Name","top2Count","top3Name","top3Count","yValues","map","data","xValues","resultData","labels","datasets","backgroundColor","borderColor","options","maintainAspectRatio","title","display","text","fontSize","legend","scales","yAxes","scaleLabel","labelString","fontColor","ticks","xAxes","boxShadow","maxWidth","height","borderRadius","overflow","paddingTop","paddingBotton","color","padding","boxSizing"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { HorizontalBar } from \"react-chartjs-2\";\nimport { Card, Button, Container, Row, Col } from \"react-bootstrap\";\n\nexport default function ShowsCount(props) {\n  const { result } = props;\n\n  //convert data object to arrays\n  const resultsArr = Object.entries(result);\n\n  //sort the data to small to large\n  const sorted = resultsArr.sort((a, b) => b[1] - a[1]);\n\n  //filter only the top 20 most viewed shows/movies\n  const limitToTopTwenty = sorted.slice(-20);\n\n  const top1Name = limitToTopTwenty[0][0];\n  const top1Count = limitToTopTwenty[0][1];\n  const top2Name = limitToTopTwenty[1][0];\n  const top2Count = limitToTopTwenty[1][1];\n  const top3Name = limitToTopTwenty[2][0];\n  const top3Count = limitToTopTwenty[2][1];\n\n  //define yValues & xValues to be used with your chart\n  const yValues = limitToTopTwenty.map((data) => data[1]);\n  const xValues = limitToTopTwenty.map((data) => data[0]);\n\n  //main data set for Graph\n  const resultData = {\n    labels: xValues,\n    datasets: [\n      {\n        data: yValues,\n        backgroundColor: \"rgba(234, 87, 102, 0.6)\",\n        borderColor: \"rgba(234, 87, 102, 0.6)\",\n      },\n    ],\n  };\n\n  //option for Graph\n  const options = {\n    maintainAspectRatio: false,\n    title: {\n      display: true,\n      text: \"Your Top Viewed Shows\",\n      fontSize: 25,\n    },\n    legend: {\n      display: false,\n    },\n    scales: {\n      yAxes: [\n        {\n          scaleLabel: {\n            display: true,\n            labelString: \"total view count (per watch event)\",\n            fontColor: \"rgb(224, 228, 228)\",\n          },\n          ticks: {\n            fontColor: \"rgb(224, 228, 228)\",\n          },\n        },\n      ],\n      xAxes: [\n        {\n          scaleLabel: {\n            fontColor: \"rgb(224, 228, 228)\",\n          },\n          ticks: {\n            fontColor: \"rgb(224, 228, 228)\",\n          },\n        },\n      ],\n    },\n  };\n  return (\n    <Card\n      style={{\n        backgroundColor: \"rgb(34, 36, 41)\",\n        boxShadow: \"0 0 6px rgba(0, 0, 0, 0.1)\",\n        // position: \"absolute\",\n        // top: \"50%\",\n        // left: \"50%\",\n        // transform: \"translate(-50%, -50%)\",\n        maxWidth: \"500px\",\n        height: \"500px\",\n        borderRadius: \"10px\",\n        overflow: \"hidden\",\n        paddingTop: \"1em\",\n        paddingBotton: \"2em\",\n        color: \"rgb(224, 228, 228)\",\n      }}\n    >\n      <div\n        className=\"about\"\n        style={{ height: \"150px\", padding: \"20px\", boxSizing: \"border-box\" }}\n      >\n        {/* <h1 style={{ fontSize: \"20px\" }}>\n          You watched <strong>{top1Name}</strong>{\" \"}\n          <span style={{ color: \"red\" }}>{top1Count}</span> times!\n        </h1> */}\n        <div>\n          <HorizontalBar\n            data={resultData}\n            options={options}\n            width={500}\n            height={250}\n          />\n        </div>\n        {/* <h2 style={{ fontSize: \"15px\" }}>Your Top 3 Most Viewed Shows</h2>\n        <p style={{ fontSize: \"15px\" }}>\n          {top1Name}: {top1Count} <br />\n          {top2Name} : {top2Count}\n          <br />\n          {top3Name}: {top3Count}\n        </p> */}\n      </div>\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
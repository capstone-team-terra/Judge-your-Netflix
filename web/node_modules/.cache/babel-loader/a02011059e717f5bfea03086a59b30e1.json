{"ast":null,"code":"var _jsxFileName = \"/Users/Natalie/Desktop/SeniorPhase/Judge-your-Netflix/web/src/components/resultsComponent/ShowsCount.js\";\nimport React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ShowsCount(props) {\n  const {\n    result\n  } = props; //convert data object to arrays\n\n  const resultsArr = Object.entries(result); //sort the data to small to large\n\n  const sorted = resultsArr.sort((a, b) => a[1] - b[1]); //filter only the top 20 most viewed shows/movies\n\n  const limitToTopTwenty = sorted.slice(-20); //define yValues & xValues to be used with your chart\n\n  const yValues = limitToTopTwenty.map(data => data[1]);\n  const xValues = limitToTopTwenty.map(data => data[0]); //main data set for Graph\n\n  const resultData = {\n    labels: xValues,\n    datasets: [{\n      data: yValues,\n      backgroundColor: \"rgba(234, 87, 102, 0.6)\",\n      borderColor: \"rgba(234, 87, 102, 0.6)\"\n    }]\n  }; //option for Graph\n\n  const options = {\n    maintainAspectRatio: false,\n    title: {\n      display: true,\n      text: \"The Top Viewed Shows\",\n      fontSize: 25\n    },\n    legend: {\n      display: false\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"You watched\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"blue\"\n        },\n        children: [\"\\\"\", sorted[sorted.length - 1][0], \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        children: sorted[sorted.length - 1][1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), \" \", \"times!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Top 3 Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        textAlign: \"left\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [sorted[sorted.length - 1][0], \": \", sorted[sorted.length - 1][1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [sorted[sorted.length - 2][0], \" : \", sorted[sorted.length - 2][1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [sorted[sorted.length - 3][0], \": \", sorted[sorted.length - 3][1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: resultData,\n        options: options,\n        width: 600,\n        height: 400\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/Natalie/Desktop/SeniorPhase/Judge-your-Netflix/web/src/components/resultsComponent/ShowsCount.js"],"names":["React","Bar","ShowsCount","props","result","resultsArr","Object","entries","sorted","sort","a","b","limitToTopTwenty","slice","yValues","map","data","xValues","resultData","labels","datasets","backgroundColor","borderColor","options","maintainAspectRatio","title","display","text","fontSize","legend","color","length","textAlign","flexDirection","alignItems"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nexport default function ShowsCount(props) {\n  const { result } = props;\n\n  //convert data object to arrays\n  const resultsArr = Object.entries(result);\n\n  //sort the data to small to large\n  const sorted = resultsArr.sort((a, b) => a[1] - b[1]);\n\n  //filter only the top 20 most viewed shows/movies\n  const limitToTopTwenty = sorted.slice(-20);\n\n  //define yValues & xValues to be used with your chart\n  const yValues = limitToTopTwenty.map((data) => data[1]);\n  const xValues = limitToTopTwenty.map((data) => data[0]);\n\n  //main data set for Graph\n  const resultData = {\n    labels: xValues,\n    datasets: [\n      {\n        data: yValues,\n        backgroundColor: \"rgba(234, 87, 102, 0.6)\",\n        borderColor: \"rgba(234, 87, 102, 0.6)\",\n      },\n    ],\n  };\n\n  //option for Graph\n  const options = {\n    maintainAspectRatio: false,\n    title: {\n      display: true,\n      text: \"The Top Viewed Shows\",\n      fontSize: 25,\n    },\n    legend: {\n      display: false,\n    },\n  };\n  return (\n    <div>\n      <h2>\n        You watched{\" \"}\n        <span style={{ color: \"blue\" }}>\"{sorted[sorted.length - 1][0]}\"</span>{\" \"}\n        <span style={{ color: \"red\" }}>{sorted[sorted.length - 1][1]}</span>{\" \"}\n        times!\n      </h2>\n      <h3 style={{ textAlign: \"center\" }}>Top 3 Results</h3>\n      <ol\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          textAlign: \"left\",\n        }}\n      >\n        <li>\n          {sorted[sorted.length - 1][0]}: {sorted[sorted.length - 1][1]}\n        </li>\n        <li>\n          {sorted[sorted.length - 2][0]} : {sorted[sorted.length - 2][1]}\n        </li>\n        <li>\n          {sorted[sorted.length - 3][0]}: {sorted[sorted.length - 3][1]}\n        </li>\n      </ol>\n      <div>\n        <Bar data={resultData} options={options} width={600} height={400} />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}